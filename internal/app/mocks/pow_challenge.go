// Code generated by mockery v2.53.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// PowChallenge is an autogenerated mock type for the powChallenge type
type PowChallenge struct {
	mock.Mock
}

type PowChallenge_Expecter struct {
	mock *mock.Mock
}

func (_m *PowChallenge) EXPECT() *PowChallenge_Expecter {
	return &PowChallenge_Expecter{mock: &_m.Mock}
}

// GenerateChallenge provides a mock function with no fields
func (_m *PowChallenge) GenerateChallenge() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GenerateChallenge")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// PowChallenge_GenerateChallenge_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateChallenge'
type PowChallenge_GenerateChallenge_Call struct {
	*mock.Call
}

// GenerateChallenge is a helper method to define mock.On call
func (_e *PowChallenge_Expecter) GenerateChallenge() *PowChallenge_GenerateChallenge_Call {
	return &PowChallenge_GenerateChallenge_Call{Call: _e.mock.On("GenerateChallenge")}
}

func (_c *PowChallenge_GenerateChallenge_Call) Run(run func()) *PowChallenge_GenerateChallenge_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *PowChallenge_GenerateChallenge_Call) Return(_a0 string) *PowChallenge_GenerateChallenge_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PowChallenge_GenerateChallenge_Call) RunAndReturn(run func() string) *PowChallenge_GenerateChallenge_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateChallenge provides a mock function with given fields: challenge, response
func (_m *PowChallenge) ValidateChallenge(challenge string, response string) bool {
	ret := _m.Called(challenge, response)

	if len(ret) == 0 {
		panic("no return value specified for ValidateChallenge")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, string) bool); ok {
		r0 = rf(challenge, response)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// PowChallenge_ValidateChallenge_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateChallenge'
type PowChallenge_ValidateChallenge_Call struct {
	*mock.Call
}

// ValidateChallenge is a helper method to define mock.On call
//   - challenge string
//   - response string
func (_e *PowChallenge_Expecter) ValidateChallenge(challenge interface{}, response interface{}) *PowChallenge_ValidateChallenge_Call {
	return &PowChallenge_ValidateChallenge_Call{Call: _e.mock.On("ValidateChallenge", challenge, response)}
}

func (_c *PowChallenge_ValidateChallenge_Call) Run(run func(challenge string, response string)) *PowChallenge_ValidateChallenge_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *PowChallenge_ValidateChallenge_Call) Return(_a0 bool) *PowChallenge_ValidateChallenge_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PowChallenge_ValidateChallenge_Call) RunAndReturn(run func(string, string) bool) *PowChallenge_ValidateChallenge_Call {
	_c.Call.Return(run)
	return _c
}

// NewPowChallenge creates a new instance of PowChallenge. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPowChallenge(t interface {
	mock.TestingT
	Cleanup(func())
}) *PowChallenge {
	mock := &PowChallenge{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
